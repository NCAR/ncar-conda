#!/bin/bash
#
#   This script installs a kernel for a specified version of Julia
#

set -e

# Settings
my_dir="$( cd "$(dirname "$(readlink -f "$0")")" ; pwd )"
my_user=$(whoami)
ncarenv_version=$(module -t list |& grep ncarenv | cut -d/ -f2)
julia_version=$(module -t list |& grep julia | cut -d/ -f2)

if [[ -z $julia_version ]]; then
    >&2 echo "Error: Please load desired Julia module first!"
    exit 1
fi

if [[ " $@ " != *" --user "* ]]; then
    if [[ $my_user != csgteam ]]; then
        export kernel_prefix="ktest-"
    fi

    if [[ $CONDA_PREFIX != *jhk-* ]] && [[ $CONDA_PREFIX != *jhub-* ]]; then
        >&2 echo "Error: Please load a JupyterHub Kernel conda environment first!"
        exit 1
    fi
elif [[ -z $CONDA_PREFIX ]] || ! which jupyter-lab >& /dev/null; then
    >&2 echo "Error: Please load a Conda environment with JupyterLab first!"
    exit 1
else
    export kernel_prefix="user-"
fi

if [[ $my_user == csgteam ]]; then
    export hub_kernels_private=/glade/u/ssg/ch/usr/jupyterhub/kernels
    export hub_kernels_public=/glade/u/apps/jupyterhub/csg-managed/prod/kernels
else
    export hub_kernels_private=$HOME/.local/share/jupyter/kernels
fi

kernel_name=${kernel_prefix}julia-${julia_version,,}
kernel_file=$hub_kernels_private/$kernel_name/kernel.json

module -q purge
module -q load ncarenv/$ncarenv_version julia/$julia_version

# Install the Julia kernel package
function install_jpkg {
    julia -e 'using Pkg; Pkg.add("IJulia")'
}

export JULIA_DEPOT_PATH=$CONDA_PREFIX/julia/$NCAR_HOST/$julia_version

if [[ ! -d $JULIA_DEPOT_PATH ]]; then
    echo "*** Installing IJulia package for $NCAR_HOST ***"
    install_jpkg
else
    echo "IJulia exists for $NCAR_HOST; skipping step ..."
fi

# --- CREATE KERNEL LAUNCHER

function create_kernel_launcher {
cat > $1 << EOF
#!/bin/bash

module --force purge

if [[ \$NCAR_HOST == casper ]]; then
    module load ncarenv/23.10 conda julia/\$1
else
    module load ncarenv/23.09 conda julia/\$1
fi

conda activate $CONDA_PREFIX

export JULIA_DEPOT_PATH=\$CONDA_PREFIX/julia/\$NCAR_HOST/\$1
shift; shift

exec julia -i --color=yes --project=@. \$JULIA_DEPOT_PATH/packages/IJulia/*/src/kernel.jl "\$@"
EOF

chmod +x $1
}

if [[ ! -f $CONDA_PREFIX/kernel-launchers/julia ]]; then
    echo "*** Creating Julia kernel launcher ***"
    mkdir -p $CONDA_PREFIX/kernel-launchers
    create_kernel_launcher $CONDA_PREFIX/kernel-launchers/julia
else
    echo "Launcher exists; skipping step ..."
fi

# --- CREATE KERNEL

function create_kernel {
cat > $1 << EOF
{
    "argv": ["$CONDA_PREFIX/kernel-launchers/julia",
        "$julia_version",
        "{connection_file}"],
    "display_name": "Julia $julia_version${kernel_prefix:+ (${kernel_prefix/-})}",
    "language": "julia",
    "interrupt_mode": "signal",
    "env": {},
    "name": "$kernel_name"
}
EOF
}

if [[ ! -f $kernel_file ]]; then
    echo "*** Creating kernel file for $julia_version ***"
    asset_dir=/glade/u/apps/etc/logos/julia

    if [[ -d $asset_dir ]]; then
        cp -r $asset_dir $hub_kernels_private/$kernel_name
    else
        mkdir -p $hub_kernels_private/$kernel_name
    fi

    create_kernel $kernel_file
else
    echo "Kernel exists; skipping step ..."
fi

# Preserve script
cp $0 $CONDA_PREFIX/ncar
