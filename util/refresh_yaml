#!/bin/bash
#
#   This utility script can be used to detect deployed environments

set -e

# Prep work
repo_root="$( cd "$(dirname "$(readlink -f "$0")")"/.. ; pwd )"
$repo_root/util/check_repo || exit 1
cd $repo_root/envs

# Check for conda
if ! which conda >& /dev/null; then
    >&2 echo "Error: conda not available in this shell. Please load conda module to continue."
    exit 1
fi

# Check for conda channel settings in home
if [[ -f ~/.condarc ]]; then
    if grep -q "^channels:" ~/.condarc; then
        >&2 echo "Error: Custom channels detected in ~/.condarc. These settings will affect YAML outputs."
        >&2 echo "       Remove these settings and retry."
        exit 1
    fi
fi

echo "Querying Conda environments on system ..."

# Get list of environment types
env_types=$(find . -mindepth 1 -maxdepth 1 -type d -exec basename {} \;)

# Get listing of environments in system dir
env_list=$(conda env list | grep $NCAR_ROOT_CONDA)

# Populate YAML files
for env_type in $env_types; do
    echo "Looking for $env_type environments ..."
    sub_list=$(awk -v et=^${env_type}- '$1 ~ et {print $1}' <<< "$env_list")
    mkdir -p $env_type/versions

    for env_name in $sub_list; do
        echo " - $env_name"

        if [[ ! -f $env_type/versions/${env_name}.yml ]]; then
            read -e -p "   Not current tracked! Add YAML file to roster (y/N)? " update_yaml
            update_yaml=${update_yaml,,}

            if [[ yes == ${update_yaml:-no}* ]]; then
                echo "   Exporting environment versions ..."
                conda env export -n $env_name > $env_type/versions/${env_name}.yml
            fi
        else
            echo "   YAML file exists for $env_name. Checking for differences ..."

            if ! $repo_root/bin/compare_env_yaml -q -f $env_name; then
                read -e -p "   Differences detected! Overwrite existing YAML file (y/N)? " update_yaml
                update_yaml=${update_yaml,,}

                if [[ yes == ${update_yaml:-no}* ]]; then
                    echo "   Exporting environment versions ..."
                    conda env export -n $env_name > $env_type/versions/${env_name}.yml
                fi
            fi
        fi
        
        if [[ yes == ${update_yaml:-no}* ]]; then
            echo "   Exporting environment history ..."
            conda env export --from-history -n $env_name > $env_type/${env_name}.yml
            unset update_yaml
        fi
    done
done
